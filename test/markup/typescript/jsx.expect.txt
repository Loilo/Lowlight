[[start:keyword]]export[[end]] [[start:keyword]]function[[end]][[start:function]] [[end]][[start:title]]getModuleInstanceState[[end]][[start:function]]([[end]][[start:params]]node: Node[[end]][[start:function]]): [[end]][[start:title]]ModuleInstanceState[[end]][[start:function]] [[end]]{
    [[start:comment]]// A module is uninstantiated if it contains only[[end]]
    [[start:comment]]// 1. interface declarations, type alias declarations[[end]]
    [[start:keyword]]if[[end]] (node.kind === SyntaxKind.InterfaceDeclaration || node.kind === SyntaxKind.TypeAliasDeclaration) {
        [[start:keyword]]return[[end]] ModuleInstanceState.NonInstantiated;
    }
    [[start:comment]]// 2. const enum declarations[[end]]
    [[start:keyword]]else[[end]] [[start:keyword]]if[[end]] (isConstEnumDeclaration(node)) {
        [[start:keyword]]return[[end]] ModuleInstanceState.ConstEnumOnly;
    }
    [[start:comment]]// 3. non-exported import declarations[[end]]
    [[start:keyword]]else[[end]] [[start:keyword]]if[[end]] ((node.kind === SyntaxKind.ImportDeclaration || node.kind === SyntaxKind.ImportEqualsDeclaration) && !(node.flags & NodeFlags.Export)) {
        [[start:keyword]]return[[end]] ModuleInstanceState.NonInstantiated;
    }
    [[start:comment]]// 4. other uninstantiated module declarations.[[end]]
    [[start:keyword]]else[[end]] [[start:keyword]]if[[end]] (node.kind === SyntaxKind.ModuleBlock) {
        [[start:keyword]]let[[end]] state = ModuleInstanceState.NonInstantiated;
        forEachChild(node, [[start:params]]n[[end]][[start:function]] =>[[end]] {
            [[start:keyword]]switch[[end]] (getModuleInstanceState(n)) {
                [[start:keyword]]case[[end]] ModuleInstanceState.NonInstantiated:
                    [[start:comment]]// child is non-instantiated - continue searching[[end]]
                    [[start:keyword]]return[[end]] [[start:literal]]false[[end]];
                [[start:keyword]]case[[end]] ModuleInstanceState.ConstEnumOnly:
                    [[start:comment]]// child is const enum only - record state and continue searching[[end]]
                    state = ModuleInstanceState.ConstEnumOnly;
                    [[start:keyword]]return[[end]] [[start:literal]]false[[end]];
                [[start:keyword]]case[[end]] ModuleInstanceState.Instantiated:
                    [[start:comment]]// child is instantiated - record state and stop[[end]]
                    state = ModuleInstanceState.Instantiated;
                    [[start:keyword]]return[[end]] [[start:literal]]true[[end]];
            }
        });
        [[start:keyword]]return[[end]] state;
    }
    [[start:keyword]]else[[end]] [[start:keyword]]if[[end]] (node.kind === SyntaxKind.ModuleDeclaration) {
        [[start:keyword]]return[[end]] getModuleInstanceState((<ModuleDeclaration>node).body);
    }
    [[start:keyword]]else[[end]] {
        [[start:keyword]]return[[end]] ModuleInstanceState.Instantiated;
    }
}
