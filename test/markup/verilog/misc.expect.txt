[[start:meta]]`[[end]][[start:meta-keyword]]timescale[[end]][[start:meta]] 1ns / 1ps[[end]]

[[start:comment]]/**
 * counter: a generic clearable up-counter
 */[[end]]

[[start:keyword]]module[[end]] counter
    #([[start:keyword]]parameter[[end]] WIDTH=[[start:number]]64[[end]])
    (
        [[start:keyword]]input[[end]] clk,
        [[start:keyword]]input[[end]] ce,
        [[start:keyword]]input[[end]] arst_n,
        [[start:keyword]]output[[end]] [[start:keyword]]reg[[end]] [WIDTH-[[start:number]]1[[end]]:[[start:number]]0[[end]]] q
    );

    [[start:comment]]// some child[[end]]
    clock_buffer [[start:variable]]#(WIDTH)[[end]] buffer_inst (
      [[start:variable]].clk[[end]](clk),
      [[start:variable]].ce[[end]](ce),
      [[start:variable]].reset[[end]](arst_n)
    );

    [[start:comment]]// Simple gated up-counter with async clear[[end]]

    [[start:keyword]]always[[end]] @([[start:keyword]]posedge[[end]] clk [[start:keyword]]or[[end]] [[start:keyword]]negedge[[end]] arst_n) [[start:keyword]]begin[[end]]
        [[start:keyword]]if[[end]] (arst_n == [[start:number]]1'b0[[end]]) [[start:keyword]]begin[[end]]
            q <= {WIDTH {[[start:number]]1'b0[[end]]}};
            [[start:keyword]]end[[end]]
        [[start:keyword]]else[[end]] [[start:keyword]]begin[[end]]
            q <= q;
            [[start:keyword]]if[[end]] (ce == [[start:number]]1'b1[[end]]) [[start:keyword]]begin[[end]]
                q <= q + [[start:number]]1[[end]];
            [[start:keyword]]end[[end]]
        [[start:keyword]]end[[end]]
    [[start:keyword]]end[[end]]

[[start:keyword]]endmodule[[end]]
